openapi: 3.0.3
info:
  title: IM即时通讯系统API
  description: |
    这是一个基于Go语言和Gin框架开发的即时通讯系统API。

    ## 功能特性
    - 用户注册和登录
    - 短信验证码登录
    - 用户信息管理

    ## 认证方式
    目前API暂未实现JWT认证，后续版本会添加。

    ## 响应格式
    所有API响应都遵循统一的JSON格式：
    ```json
    {
      "code": 200,
      "message": "操作成功",
      "data": {}
    }
    ```

    ## 错误码说明
    - `200`: 操作成功
    - `400`: 客户端请求参数错误
    - `500`: 服务器内部错误
  version: 1.0.0
  contact:
    name: IM系统开发团队
    email: dev@im-system.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: http://localhost:9999
    description: 开发环境
  - url: https://api.im-system.com
    description: 生产环境

tags:
  - name: 用户管理
    description: 用户注册、登录、验证码等操作
  - name: 认证
    description: 用户认证相关接口

paths:
  /send/smsCode:
    get:
      tags:
        - 用户管理
      summary: 发送短信验证码
      description: 向指定手机号发送短信验证码，用于注册或登录验证
      operationId: sendSmsCode
      parameters:
        - name: phone
          in: query
          description: 手机号码
          required: true
          schema:
            type: string
            pattern: '^1[3-9]\d{9}$'
            example: "13800138000"
      responses:
        "200":
          description: 发送成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                code: 200
                message: "发送成功"
        "400":
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                code: 400
                message: "手机号格式不正确"
        "500":
          description: 服务器内部错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                code: 500
                message: "短信发送失败"

  /login:
    post:
      tags:
        - 认证
      summary: 用户登录
      description: 使用手机号和密码进行登录
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
            example:
              phone: "13800138000"
              password: "123456"
      responses:
        "200":
          description: 登录成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                code: 200
                message: "登录成功"
        "400":
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                code: 400
                message: "手机号和密码不能为空"
        "500":
          description: 登录失败
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                code: 500
                message: "用户名或密码错误"

  /loginWithSms:
    post:
      tags:
        - 认证
      summary: 验证码登录
      description: 使用手机号和短信验证码进行登录
      operationId: loginWithSms
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginWithSmsRequest"
            example:
              phone: "13800138000"
              phoneCode: "123456"
      responses:
        "200":
          description: 登录成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                code: 200
                message: "登录成功"
        "400":
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                code: 400
                message: "手机号和验证码不能为空"
        "500":
          description: 登录失败
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                code: 500
                message: "验证码错误或已过期"

  /register:
    post:
      tags:
        - 用户管理
      summary: 用户注册
      description: 注册新用户账号
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
            example:
              nickname: "张三"
              phone: "13800138000"
              password: "123456"
              phoneCode: "123456"
      responses:
        "200":
          description: 注册成功
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessResponse"
              example:
                code: 200
                message: "注册成功"
        "400":
          description: 请求参数错误
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                code: 400
                message: "所有字段都不能为空"
        "500":
          description: 注册失败
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ErrorResponse"
              example:
                code: 500
                message: "手机号已存在或验证码错误"

components:
  schemas:
    # 请求模型
    LoginRequest:
      type: object
      required:
        - phone
        - password
      properties:
        phone:
          type: string
          description: 手机号码
          pattern: '^1[3-9]\d{9}$'
          example: "13800138000"
        password:
          type: string
          description: 密码
          minLength: 6
          maxLength: 20
          example: "123456"

    LoginWithSmsRequest:
      type: object
      required:
        - phone
        - phoneCode
      properties:
        phone:
          type: string
          description: 手机号码
          pattern: '^1[3-9]\d{9}$'
          example: "13800138000"
        phoneCode:
          type: string
          description: 短信验证码
          pattern: '^\d{6}$'
          example: "123456"

    RegisterRequest:
      type: object
      required:
        - nickname
        - phone
        - password
        - phoneCode
      properties:
        nickname:
          type: string
          description: 用户昵称
          minLength: 1
          maxLength: 20
          example: "张三"
        phone:
          type: string
          description: 手机号码
          pattern: '^1[3-9]\d{9}$'
          example: "13800138000"
        password:
          type: string
          description: 密码
          minLength: 6
          maxLength: 20
          example: "123456"
        phoneCode:
          type: string
          description: 短信验证码
          pattern: '^\d{6}$'
          example: "123456"

    # 用户信息模型
    UserInfo:
      type: object
      properties:
        id:
          type: integer
          description: 用户ID
          example: 1
        uuid:
          type: string
          description: 用户唯一标识
          example: "550e8400-e29b-41d4-a716-446655440000"
        nickname:
          type: string
          description: 用户昵称
          example: "张三"
        phone:
          type: string
          description: 手机号码
          example: "13800138000"
        age:
          type: integer
          description: 年龄
          minimum: 0
          maximum: 150
          example: 25
        sex:
          type: integer
          description: 性别 0-男 1-女 2-未知
          enum: [0, 1, 2]
          example: 0
        email:
          type: string
          description: 邮箱地址
          format: email
          example: "zhangsan@example.com"
        avatar:
          type: string
          description: 头像URL
          example: "https://example.com/avatar.jpg"
        signature:
          type: string
          description: 个性签名
          example: "这个人很懒，什么都没有留下"
        birthday:
          type: string
          description: 生日
          format: date
          example: "1995-01-01"
        is_admin:
          type: integer
          description: 是否为管理员 0-否 1-是
          enum: [0, 1]
          example: 0
        status:
          type: integer
          description: 用户状态 0-正常 1-禁用
          enum: [0, 1]
          example: 0
        created_at:
          type: string
          description: 创建时间
          format: date-time
          example: "2024-01-01T12:00:00Z"

    # 响应模型
    SuccessResponse:
      type: object
      properties:
        code:
          type: integer
          description: 响应状态码
          example: 200
        message:
          type: string
          description: 响应消息
          example: "操作成功"
        data:
          type: object
          description: 响应数据（可选）
          nullable: true

    ErrorResponse:
      type: object
      properties:
        code:
          type: integer
          description: 错误状态码
          example: 400
        message:
          type: string
          description: 错误消息
          example: "请求参数错误"

    # 通用响应包装器
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          description: 响应状态码
          enum: [200, 400, 500]
        message:
          type: string
          description: 响应消息
        data:
          type: object
          description: 响应数据
          nullable: true

  # 安全定义（预留）
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: |
        JWT认证令牌（后续版本实现）

        使用方式：
        ```
        Authorization: Bearer <your-jwt-token>
        ```

# 全局安全要求（预留）
# security:
#   - BearerAuth: []
